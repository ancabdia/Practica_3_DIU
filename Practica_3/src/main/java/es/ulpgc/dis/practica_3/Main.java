/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package es.ulpgc.dis.practica_3;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.BorderFactory;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Andres
 */
public class Main extends javax.swing.JFrame {

    int min;
    int max;
    int[][] m = new int[10][10];
    int language = 0;
    boolean flaggeneral = false;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPanel = new javax.swing.JTabbedPane();
        applicationPanel = new javax.swing.JPanel();
        valuesPanel = new javax.swing.JPanel();
        minTextField = new javax.swing.JTextField();
        maxTextField = new javax.swing.JTextField();
        minValueLabel = new javax.swing.JLabel();
        maxValueLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();
        sliderPanel = new javax.swing.JPanel();
        valueSlider = new javax.swing.JSlider();
        resultsPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        filteredMatrixTextArea = new javax.swing.JTextArea();
        filteredMatrixLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        originalMatrixTextArea = new javax.swing.JTextArea();
        originalMatrixLabel = new javax.swing.JLabel();
        historyPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        historyTextArea = new javax.swing.JTextArea();
        languagePanel = new javax.swing.JPanel();
        languageSelectionPanel = new javax.swing.JPanel();
        languageSelectionComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Square Matrix Filtering");
        setResizable(false);

        valuesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Values Panel"));
        valuesPanel.setToolTipText("");

        minTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent de) {
                flaggeneral = false;
                try{
                    min = Integer.parseInt(minTextField.getText());
                    System.out.println("Intenta valor minimo introducido");
                }catch (NumberFormatException ex){
                    flaggeneral = true;
                    errorLabel.setVisible(true);
                    errorLabel.setText("Number error");
                    System.out.println("Mal valor minimo introducido");
                }
                System.out.println(flaggeneral);
                if(!maxTextField.getText().isEmpty() && !minTextField.getText().isEmpty() && !flaggeneral){
                    System.out.println("Valor no vacio");
                    if(max >= min){
                        System.out.println("Valor min menor que max");
                        flaggeneral = false;
                        fill();
                    }else{
                        System.out.println("Valor min mayor que max");
                        flaggeneral = true;
                        errorLabel.setVisible(true);
                        errorLabel.setText("Min < Max");
                    }
                }
            }

            @Override
            public void removeUpdate(DocumentEvent de) {

            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                flaggeneral = false;
                try{
                    min = Integer.parseInt(minTextField.getText());
                    System.out.println("Intenta valor minimo introducido");
                }catch (NumberFormatException ex){
                    flaggeneral = true;
                    errorLabel.setVisible(true);
                    errorLabel.setText("Number error");
                    System.out.println("Mal valor minimo introducido");
                }

                if(!maxTextField.getText().isEmpty() && !minTextField.getText().isEmpty() && !flaggeneral){
                    System.out.println("Valor no vacio");
                    if(max >= min){
                        System.out.println("Valor min menor que max");
                        flaggeneral = false;
                        fill();
                    }else{
                        System.out.println("Valor min mayor que max");
                        flaggeneral = true;
                        errorLabel.setVisible(true);
                        errorLabel.setText("Min < Max");
                    }
                }
            }
        });
        minTextField.setToolTipText("Min Value");
        minTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minTextFieldActionPerformed(evt);
            }
        });

        maxTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent de) {
                flaggeneral = false;
                try{
                    max = Integer.parseInt(maxTextField.getText());
                }catch (NumberFormatException ex){
                    flaggeneral = true;
                    errorLabel.setVisible(true);
                    errorLabel.setText("Number error");
                }
                if(!maxTextField.getText().isEmpty() && !minTextField.getText().isEmpty() && !flaggeneral){
                    if(max >= min){
                        flaggeneral = false;
                        fill();
                    }else{
                        flaggeneral = true;
                        errorLabel.setVisible(true);
                        errorLabel.setText("Min < Max");
                    }
                }
            }

            @Override
            public void removeUpdate(DocumentEvent de) {

            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                flaggeneral = false;
                try{
                    max = Integer.parseInt(maxTextField.getText());
                }catch (NumberFormatException ex){
                    flaggeneral = true;
                    errorLabel.setVisible(true);
                    errorLabel.setText("Number error");
                }
                if(!maxTextField.getText().isEmpty() && !minTextField.getText().isEmpty() && !flaggeneral){
                    if(max >= min){
                        flaggeneral = false;
                        fill();
                    }else{
                        flaggeneral = true;
                        errorLabel.setVisible(true);
                        errorLabel.setText("Min < Max");
                    }
                }

            }});
            maxTextField.setToolTipText("Max Value");
            maxTextField.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    maxTextFieldActionPerformed(evt);
                }
            });

            minValueLabel.setText("Min Value");

            maxValueLabel.setText("Max Value");

            errorLabel.setForeground(new java.awt.Color(255, 0, 51));
            errorLabel.setText("ONLY NUMBERS");

            javax.swing.GroupLayout valuesPanelLayout = new javax.swing.GroupLayout(valuesPanel);
            valuesPanel.setLayout(valuesPanelLayout);
            valuesPanelLayout.setHorizontalGroup(
                valuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(valuesPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(valuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(minValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(minTextField))
                    .addGap(18, 43, Short.MAX_VALUE)
                    .addGroup(valuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(maxValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(maxTextField))
                    .addGap(16, 16, 16))
                .addGroup(valuesPanelLayout.createSequentialGroup()
                    .addGap(43, 43, 43)
                    .addComponent(errorLabel)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            valuesPanelLayout.setVerticalGroup(
                valuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(valuesPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(valuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(minValueLabel)
                        .addComponent(maxValueLabel))
                    .addGap(5, 5, 5)
                    .addGroup(valuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(maxTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(minTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(errorLabel)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            errorLabel.setVisible(false);

            sliderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Slider Panel"));

            valueSlider.setToolTipText("Scroll for filter");
            valueSlider.addChangeListener(new javax.swing.event.ChangeListener() {
                public void stateChanged(javax.swing.event.ChangeEvent evt) {
                    valueSliderStateChanged(evt);
                }
            });

            javax.swing.GroupLayout sliderPanelLayout = new javax.swing.GroupLayout(sliderPanel);
            sliderPanel.setLayout(sliderPanelLayout);
            sliderPanelLayout.setHorizontalGroup(
                sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(sliderPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(valueSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
            );
            sliderPanelLayout.setVerticalGroup(
                sliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(sliderPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(valueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(54, Short.MAX_VALUE))
            );

            valueSlider.setVisible(false);

            resultsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

            filteredMatrixTextArea.setEditable(false);
            filteredMatrixTextArea.setColumns(10);
            filteredMatrixTextArea.setFont(new java.awt.Font("Andale Mono", 0, 14)); // NOI18N
            filteredMatrixTextArea.setRows(10);
            filteredMatrixTextArea.setToolTipText("result matrix filtered");
            jScrollPane2.setViewportView(filteredMatrixTextArea);

            filteredMatrixLabel.setText("Filtered");

            originalMatrixTextArea.setEditable(false);
            originalMatrixTextArea.setColumns(10);
            originalMatrixTextArea.setFont(new java.awt.Font("Andale Mono", 0, 14)); // NOI18N
            originalMatrixTextArea.setRows(10);
            originalMatrixTextArea.setToolTipText("original matrix");
            jScrollPane1.setViewportView(originalMatrixTextArea);
            /*originalMatrixTextArea.getDocument().addDocumentListener(new DocumentListener() {

                @Override
                public void insertUpdate(DocumentEvent de) {
                    //fill();
                }

                @Override
                public void removeUpdate(DocumentEvent de) {
                    //fill();
                }

                @Override
                public void changedUpdate(DocumentEvent de) {
                    //fill();
                }
            });*/

            originalMatrixLabel.setText("Original");

            javax.swing.GroupLayout resultsPanelLayout = new javax.swing.GroupLayout(resultsPanel);
            resultsPanel.setLayout(resultsPanelLayout);
            resultsPanelLayout.setHorizontalGroup(
                resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(resultsPanelLayout.createSequentialGroup()
                    .addComponent(jScrollPane1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(14, 14, 14))
                .addGroup(resultsPanelLayout.createSequentialGroup()
                    .addGap(108, 108, 108)
                    .addComponent(originalMatrixLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 233, Short.MAX_VALUE)
                    .addComponent(filteredMatrixLabel)
                    .addGap(117, 117, 117))
            );
            resultsPanelLayout.setVerticalGroup(
                resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultsPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(originalMatrixLabel)
                        .addComponent(filteredMatrixLabel))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                        .addComponent(jScrollPane2))
                    .addContainerGap())
            );

            javax.swing.GroupLayout applicationPanelLayout = new javax.swing.GroupLayout(applicationPanel);
            applicationPanel.setLayout(applicationPanelLayout);
            applicationPanelLayout.setHorizontalGroup(
                applicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(applicationPanelLayout.createSequentialGroup()
                    .addGroup(applicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(applicationPanelLayout.createSequentialGroup()
                            .addComponent(valuesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(sliderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(applicationPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(resultsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addContainerGap())
            );
            applicationPanelLayout.setVerticalGroup(
                applicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(applicationPanelLayout.createSequentialGroup()
                    .addGroup(applicationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(applicationPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(sliderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(valuesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(resultsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            tabPanel.addTab("Application", applicationPanel);

            historyTextArea.setEditable(false);
            historyTextArea.setColumns(20);
            historyTextArea.setRows(5);
            jScrollPane3.setViewportView(historyTextArea);

            javax.swing.GroupLayout historyPanelLayout = new javax.swing.GroupLayout(historyPanel);
            historyPanel.setLayout(historyPanelLayout);
            historyPanelLayout.setHorizontalGroup(
                historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
            );
            historyPanelLayout.setVerticalGroup(
                historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
            );

            tabPanel.addTab("History", historyPanel);

            languageSelectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Language Selection"));

            languageSelectionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "English", "Español" }));
            languageSelectionComboBox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    languageSelectionComboBoxActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout languageSelectionPanelLayout = new javax.swing.GroupLayout(languageSelectionPanel);
            languageSelectionPanel.setLayout(languageSelectionPanelLayout);
            languageSelectionPanelLayout.setHorizontalGroup(
                languageSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(languageSelectionPanelLayout.createSequentialGroup()
                    .addGap(45, 45, 45)
                    .addComponent(languageSelectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(48, Short.MAX_VALUE))
            );
            languageSelectionPanelLayout.setVerticalGroup(
                languageSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(languageSelectionPanelLayout.createSequentialGroup()
                    .addGap(50, 50, 50)
                    .addComponent(languageSelectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(46, Short.MAX_VALUE))
            );

            javax.swing.GroupLayout languagePanelLayout = new javax.swing.GroupLayout(languagePanel);
            languagePanel.setLayout(languagePanelLayout);
            languagePanelLayout.setHorizontalGroup(
                languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, languagePanelLayout.createSequentialGroup()
                    .addContainerGap(195, Short.MAX_VALUE)
                    .addComponent(languageSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(166, 166, 166))
            );
            languagePanelLayout.setVerticalGroup(
                languagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, languagePanelLayout.createSequentialGroup()
                    .addContainerGap(146, Short.MAX_VALUE)
                    .addComponent(languageSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(100, 100, 100))
            );

            tabPanel.addTab("Language", languagePanel);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tabPanel)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tabPanel)
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void minTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minTextFieldActionPerformed

    private void maxTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxTextFieldActionPerformed

    }//GEN-LAST:event_maxTextFieldActionPerformed

    private void valueSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_valueSliderStateChanged
        if (valueSlider.getValue() != min) {
            fillfiltrada();
            history(2);
        }
    }//GEN-LAST:event_valueSliderStateChanged

    private void languageSelectionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_languageSelectionComboBoxActionPerformed
        // TODO add your handling code here:
        TitledBorder title;
        if(language != languageSelectionComboBox.getSelectedIndex()) historyTextArea.setText("");
        if (languageSelectionComboBox.getSelectedIndex() == 0) {
            tabPanel.setTitleAt(0, "Application");
            tabPanel.setTitleAt(1, "History");
            tabPanel.setTitleAt(2, "Language");

            title = BorderFactory.createTitledBorder("Language Selection");
            languageSelectionPanel.setBorder(title);
            title = BorderFactory.createTitledBorder("Values Panel");
            valuesPanel.setBorder(title);
            title = BorderFactory.createTitledBorder("Slider Panel");
            sliderPanel.setBorder(title);
            title = BorderFactory.createTitledBorder("Result Panel");
            resultsPanel.setBorder(title);

            minValueLabel.setText("Min value");
            maxValueLabel.setText("Max value");
            filteredMatrixLabel.setText("Filtered");
            
            language = 0;
        } else {
            tabPanel.setTitleAt(0, "Aplicacion");
            tabPanel.setTitleAt(1, "Historial");
            tabPanel.setTitleAt(2, "Idioma");

            title = BorderFactory.createTitledBorder("Seleccion Idioma");
            languageSelectionPanel.setBorder(title);
            title = BorderFactory.createTitledBorder("Panel valores");
            valuesPanel.setBorder(title);
            title = BorderFactory.createTitledBorder("Panel \'Slider\'");
            sliderPanel.setBorder(title);
            title = BorderFactory.createTitledBorder("Panel Resultado");
            resultsPanel.setBorder(title);

            minValueLabel.setText("valor Min");
            maxValueLabel.setText("Valor Max");
            filteredMatrixLabel.setText("Filtrada");
            
            language = 1;
        }
    }//GEN-LAST:event_languageSelectionComboBoxActionPerformed

    public void fillfiltrada() {

        filteredMatrixTextArea.setText("");

        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                if (m[i][j] <= valueSlider.getValue()) {
                    filteredMatrixTextArea.append("-" + " ");
                } else {
                    filteredMatrixTextArea.append(String.valueOf(m[i][j]) + " ");
                }
            }
            filteredMatrixTextArea.append("\n");
        }
    }

    public void fill() {
        originalMatrixTextArea.setText("");

        valueSlider.setMinimum(min);
        valueSlider.setMaximum(max);

        int espaciado = (int) ((max - min) / 5);
        valueSlider.setMajorTickSpacing(espaciado);
        valueSlider.setMinorTickSpacing(espaciado / 2);

        valueSlider.setPaintLabels(true);
        valueSlider.setPaintTicks(true);
        valueSlider.setVisible(true);

        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                m[i][j] = (int) Math.floor(Math.random() * (max - min + 1) + min);
            }
        }

        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                originalMatrixTextArea.append(String.valueOf(m[i][j]) + " ");
            }
            originalMatrixTextArea.append("\n");
        }

        fillfiltrada();
        history(1);
        errorLabel.setVisible(false);
    }

    public void history(int i) {
        DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss dd-MM-yyyy");
        Date date = new Date();
        if (i == 1) {
            if (languageSelectionComboBox.getSelectedIndex() == 0) {
                historyTextArea.append("[" + dateFormat.format(date) + "]" + " You have created a matrix with elements from: " + min + " to " + max + "\n");
            } else {
                historyTextArea.append("[" + dateFormat.format(date) + "]" + " Has creado una matriz cuyos elementos van desde: " + min + " hasta " + max + "\n");
            }
        } else {
            if (languageSelectionComboBox.getSelectedIndex() == 0) {
                historyTextArea.append("[" + dateFormat.format(date) + "]" + " You filtered the matrix with number: " + valueSlider.getValue() + "\n");
            } else {
                historyTextArea.append("[" + dateFormat.format(date) + "]" + " Has filtrado la matriz con el numero: " + valueSlider.getValue() + "\n");
            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel applicationPanel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel filteredMatrixLabel;
    private javax.swing.JTextArea filteredMatrixTextArea;
    private javax.swing.JPanel historyPanel;
    private javax.swing.JTextArea historyTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel languagePanel;
    private javax.swing.JComboBox<String> languageSelectionComboBox;
    private javax.swing.JPanel languageSelectionPanel;
    private javax.swing.JTextField maxTextField;
    private javax.swing.JLabel maxValueLabel;
    private javax.swing.JTextField minTextField;
    private javax.swing.JLabel minValueLabel;
    private javax.swing.JLabel originalMatrixLabel;
    private javax.swing.JTextArea originalMatrixTextArea;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JPanel sliderPanel;
    private javax.swing.JTabbedPane tabPanel;
    private javax.swing.JSlider valueSlider;
    private javax.swing.JPanel valuesPanel;
    // End of variables declaration//GEN-END:variables
}
